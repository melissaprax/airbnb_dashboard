Yesterday I learned that a histogram on a linear y-axis does not accurately display the full range of price data.

Furthermore, few insights can be gleaned without further disaggregation beyond the level of neighbourhood group.

I experimented with a violin plot with a logarithmic y-axis scale in R, grouped by room type. 

That was a much more effective plot than the histogram. However, it does not bode well with the current drop-down design as the user
would not be able to make comparisons between areas of NYC if upon dropdown selection, the violin plot only displayed 1 group at a time.


///

Secondly, the word cloud takes a very long time to generate because of the name field's string processing in JavaScript.

The word frequency calculation needs to be performed in app.py.

///

Thirdly, this application need be set up with the near complete API.


/// 

Step 1: Make a violin plot with price and room type data.

Step 2: Process the airbnb.name word frequency data in python and set up a route for this data.

Step 3: Test this application with the full API.


// 


// Notes for future reference: 
// 1. Consider whether adding number of listing to the histogram would be useful
// 2. Consider if standardizing the number of bins would be better than using the default
// 3. Consider whether numerical summary statistics would be welcome additions to the dashboard



// Code pulled from app.js prior to finalization:

// In the mapping exercise, we used the http module to create a web server.

// Javascript can't get files from your computer, but it can get them from a web server.

// JavaScript wants information.

// // Check Staten Island data in the console:
// d3.json("http://127.0.0.1:5000/api/staten_island").then(function(data) {
//   console.log(data);
// });
// // Check Bronx data in the console:
// d3.json("http://127.0.0.1:5000/api/bronx").then(function(data) {
//   console.log(data);
// });
// // Check Queens data in the console:
// d3.json("http://127.0.0.1:5000/api/queens").then(function(data) {
//   console.log(data);
// });

// Draft I:

// // Use d3.json() to request data from the Flask app
// d3.json("http://127.0.0.1:5000/api/data").then(function(data) {
//     console.log(data);

//     // Create a variable for a dropdown menu
//     var dropdownMenu = d3.select("#selDataset");

//     // Set unique neighbourhood groups as dropdown options
//     var dropdownOptions = [...new Set(data.map(d => d.neighbourhood_group))];

//     // Append dropdown options to the dropdown menu
//     dropdownOptions.forEach(function(option) {
//         dropdownMenu.append("option").text(option).property("value", option);
//     });

// // Initialize function to create histogram of price data
// function initHistogram(selection) {
//     // Fillter data to only include selected neighbourhood group
//     var filteredData = data.filter(d => d.neighbourhood_group === selection);
//     // Create array of price data
//     var filteredPrice = filteredData.map(d => d.price);
//     // Create trace for histogram
//     var trace = {
//         x: filteredPrice,
//         type: "histogram"
//     };
//     // Create data array for plot
//     var data = [trace];
//     // Create layout for plot
//     var layout = {
//         title: "Price Distribution",
//         xaxis: { title: "Price", range: [0,1300] },
//         yaxis: { title: "Count" }
//     };
//     // Plot the histogram
//     Plotly.newPlot("histogram", data, layout);
// }
// // Create function to update histogram when a new option is selected calling updateChart
// function updateChart(selection) {
//     // Call the initHistogram function to update the plot
//     initHistogram(selection);
// }

// // Create function to handle change in dropdown menu
// function optionChanged(selection) {
//     // Call updateChart function with the new selection
//     updateChart(selection);
// }
    
// // Get the first selection to initialize the plot
// var firstSelection = dropdownOptions[0];

// // Initialize the plot
// initHistogram(firstSelection);

// // Set up event listener for when a new option is selected
// dropdownMenu.on("change", function() {
//     // Get the new selection
//     var newSelection = d3.select(this).property("value");
//     // Call the optionChanged function with the new selection
//     optionChanged(newSelection);
// });
// });


// Original Notes:

// Write createHistogram function to create a histogram of the price data.

// Use the .filter function to filter the data to only the Staten Island neighborhood.

// function createHistogram(sample) {

//     var filteredData = sample.filter(d => d.neighbourhood_group === neighbourhoodGroup);

//     var filteredPrice = filteredData.map(d => d.price);

//     var trace = {
//         x: filteredPrice,
//         type: "histogram"
//     };

//     var data = [trace];

//     var layout = {
//         title: "Brooklyn Price Distribution",
//         xaxis: { title: "Price", range: [0,1300] },
//         yaxis: { title: "Count" }
//     };

//     Plotly.newPlot("histogram", data, layout);
// }

// Test the other neighbourhood groups to view their price distributions. Note: remove range argument from layout to view all data

// Cut from Draft II:

// // Create a variable for the color of the histogram bars
    // var color = "";
    // // Set color for "Entire home/apt" to be Blue
    // if (selection === "Entire home/apt") {
    //     color = "blue";
    // }
    // // Set color for "Private room" to be Red
    // else if (selection === "Private room") {
    //     color = "red";
    // }
    // // Set color for "Shared room" to be Green
    // else if (selection === "Shared room") {
    //     color = "green";
    // }

    // // Set the color of the histogram bars to be unique for each neighbourhood group
    // var color = "";
    // // Set Bronx to be Purple
    // if (selection === "Bronx") {
    //     color = "purple";
    // }
    // // Set Brooklyn to be Blue
    // else if (selection === "Brooklyn") {
    //     color = "blue";
    // }
    // // Set Manhattan to be Red
    // else if (selection === "Manhattan") {
    //     color = "red";
    // }
    // // Set Queens to be Green
    // else if (selection === "Queens") {
    //     color = "green";
    // }
    // // Set Staten Island to be Orange
    // else if (selection === "Staten Island") {
    //     color = "orange";
    // }